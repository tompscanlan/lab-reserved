package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/tompscanlan/labreserved/models"
)

// PostItemReader is a Reader for the PostItem structure.
type PostItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostItemOK creates a PostItemOK with default headers values
func NewPostItemOK() *PostItemOK {
	return &PostItemOK{}
}

/*PostItemOK handles this case with default header values.

Accepted
*/
type PostItemOK struct {
	Payload *models.Item
}

func (o *PostItemOK) Error() string {
	return fmt.Sprintf("[POST /item][%d] postItemOK  %+v", 200, o.Payload)
}

func (o *PostItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Item)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostItemBadRequest creates a PostItemBadRequest with default headers values
func NewPostItemBadRequest() *PostItemBadRequest {
	return &PostItemBadRequest{}
}

/*PostItemBadRequest handles this case with default header values.

Error
*/
type PostItemBadRequest struct {
	Payload string
}

func (o *PostItemBadRequest) Error() string {
	return fmt.Sprintf("[POST /item][%d] postItemBadRequest  %+v", 400, o.Payload)
}

func (o *PostItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
