package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetItemName get item name API
*/
func (a *Client) GetItemName(params *GetItemNameParams) (*GetItemNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetItemNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetItemName",
		Method:             "GET",
		PathPattern:        "/item/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetItemNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetItemNameOK), nil
}

/*
GetItems get items API
*/
func (a *Client) GetItems(params *GetItemsParams) (*GetItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetItems",
		Method:             "GET",
		PathPattern:        "/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetItemsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetItemsOK), nil
}

/*
GetUsers get users API
*/
func (a *Client) GetUsers(params *GetUsersParams) (*GetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersOK), nil
}

/*
PostItem add a single item to the lab list
*/
func (a *Client) PostItem(params *PostItemParams) (*PostItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostItem",
		Method:             "POST",
		PathPattern:        "/item",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostItemReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostItemOK), nil
}

/*
PostItemNameReservation post a reservation for a specific lab item
*/
func (a *Client) PostItemNameReservation(params *PostItemNameReservationParams) (*PostItemNameReservationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostItemNameReservationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostItemNameReservation",
		Method:             "POST",
		PathPattern:        "/item/{name}/reservation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostItemNameReservationReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostItemNameReservationOK), nil
}

/*
PostUser add a single user
*/
func (a *Client) PostUser(params *PostUserParams) (*PostUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUser",
		Method:             "POST",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUserOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
