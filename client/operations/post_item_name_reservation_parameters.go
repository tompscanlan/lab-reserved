package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/tompscanlan/labreserved/models"
)

// NewPostItemNameReservationParams creates a new PostItemNameReservationParams object
// with the default values initialized.
func NewPostItemNameReservationParams() *PostItemNameReservationParams {
	var ()
	return &PostItemNameReservationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostItemNameReservationParamsWithTimeout creates a new PostItemNameReservationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostItemNameReservationParamsWithTimeout(timeout time.Duration) *PostItemNameReservationParams {
	var ()
	return &PostItemNameReservationParams{

		timeout: timeout,
	}
}

/*PostItemNameReservationParams contains all the parameters to send to the API endpoint
for the post item name reservation operation typically these are written to a http.Request
*/
type PostItemNameReservationParams struct {

	/*Name
	  name of the lab equipment

	*/
	Name string
	/*Reservation
	  representation of the reservation to add

	*/
	Reservation *models.Reservation

	timeout time.Duration
}

// WithName adds the name to the post item name reservation params
func (o *PostItemNameReservationParams) WithName(Name string) *PostItemNameReservationParams {
	o.Name = Name
	return o
}

// WithReservation adds the reservation to the post item name reservation params
func (o *PostItemNameReservationParams) WithReservation(Reservation *models.Reservation) *PostItemNameReservationParams {
	o.Reservation = Reservation
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PostItemNameReservationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.Reservation == nil {
		o.Reservation = new(models.Reservation)
	}

	if err := r.SetBodyParam(o.Reservation); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
