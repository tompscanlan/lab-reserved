package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/tompscanlan/labreserved/models"
)

// PostUserReader is a Reader for the PostUser structure.
type PostUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostUserOK creates a PostUserOK with default headers values
func NewPostUserOK() *PostUserOK {
	return &PostUserOK{}
}

/*PostUserOK handles this case with default header values.

Accepted
*/
type PostUserOK struct {
	Payload *models.User
}

func (o *PostUserOK) Error() string {
	return fmt.Sprintf("[POST /user][%d] postUserOK  %+v", 200, o.Payload)
}

func (o *PostUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUserBadRequest creates a PostUserBadRequest with default headers values
func NewPostUserBadRequest() *PostUserBadRequest {
	return &PostUserBadRequest{}
}

/*PostUserBadRequest handles this case with default header values.

Error
*/
type PostUserBadRequest struct {
	Payload string
}

func (o *PostUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /user][%d] postUserBadRequest  %+v", 400, o.Payload)
}

func (o *PostUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
