package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Reservation date-time marking start of reservation,  duration, and owner of the reservation

swagger:model reservation
*/
type Reservation struct {

	/* approved or not

	Required: true
	*/
	Approved *bool `json:"approved"`

	/* date-time the reservation begins

	Required: true
	*/
	Begin *strfmt.DateTime `json:"begin"`

	/* date-time the reservation ends

	Required: true
	*/
	End *strfmt.DateTime `json:"end"`

	/* user claiming the reservation

	Required: true
	*/
	Username *string `json:"username"`
}

// Validate validates this reservation
func (m *Reservation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApproved(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBegin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Reservation) validateApproved(formats strfmt.Registry) error {

	if err := validate.Required("approved", "body", m.Approved); err != nil {
		return err
	}

	return nil
}

func (m *Reservation) validateBegin(formats strfmt.Registry) error {

	if err := validate.Required("begin", "body", m.Begin); err != nil {
		return err
	}

	return nil
}

func (m *Reservation) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("end", "body", m.End); err != nil {
		return err
	}

	return nil
}

func (m *Reservation) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}
